	$target_ID = undef;
	$com_seq = undef;
	for ($argv_i = 0; $argv_i < @ARGV ; $argv_i++){
		if ($ARGV[$argv_i] eq "-h"){
			print "	-ci	chain ID. 
	-sf	sequence file.
       	";
		die "	-h	print above information\n";
		}
		if ($ARGV[$argv_i] eq "-ci"){
			for ($argv_i2 = $argv_i+1; $argv_i2 < @ARGV; $argv_i2++){
				if ($ARGV[$argv_i2] =~ "^-"){
					last;
				}
				else{
					$target_ID = $ARGV[$argv_i2];
				}
			}
		}
		if ($ARGV[$argv_i] eq "-sf"){
			for ($argv_i2 = $argv_i+1; $argv_i2 < @ARGV; $argv_i2++){
				if ($ARGV[$argv_i2] =~ "^-"){
					last;
				}
				else{
					$com_seq = $ARGV[$argv_i2];
				}
			}
		}
	}



	if ($com_seq){
		print "user has provided the complex sequence file!\n";
		open INPUT, "$com_seq" or die "can not open!\n";
		@items = ();
		push @items, $target_ID;
		push @items, $target_ID;
		$out_file = "chain_"."$items[1]_raw.fasta";
		open OUTPUT, ">$out_file" or die "can not create!\n";
		print OUTPUT ">chain_$items[1]_raw\n";
		$chain_mark  = 0;
		while(chomp($line=<INPUT>)){
			if (($line=~"^>$items[1].*") && ($chain_mark == 0)) {
				$chain_mark = 1;
				next;
			}
			if (($line=~"^>.*") && ($chain_mark == 1)) {
				$chain_mark = 0;
				next;
			}
			if ($chain_mark == 1){
				@gezis = split //, $line;
				for($gezis_i = 0; $gezis_i < @gezis; $gezis_i++){
					if ($gezis[$gezis_i] ne " "){
						print OUTPUT "$gezis[$gezis_i]";
					}
				}
			}
		}
		print OUTPUT "\n";
		close INPUT;
		close OUTPUT;
	}
	else{
		print "read the complex sequence generated by previous scripts !\n";
		open INPUT, "../chain_$target_ID.fasta" or die "can not open!\n";
		@items = ();
		push @items, $target_ID;
		push @items, $target_ID;
		$out_file = "chain_"."$items[1]_raw.fasta";
		open OUTPUT, ">$out_file" or die "can not create!\n";
		print OUTPUT ">chain_$items[1]_raw\n";
		while(chomp($line=<INPUT>)){
			if ($line=~"^>.*") {
				next;
			}
			@gezis = split //, $line;
			for($gezis_i = 0; $gezis_i < @gezis; $gezis_i++){
				if ($gezis[$gezis_i] ne " "){
					print OUTPUT "$gezis[$gezis_i]";
				}
			}
		}
		print OUTPUT "\n";
		close INPUT;
		close OUTPUT;
	}





	system("../pdb2fasta chain_$items[1].pdb > chain_$items[1]_em_00.fasta");

	open INPUT, "chain_$items[1]_em_00.fasta" or die "can not open!\n";
	open OUTPUT, ">chain_$items[1]_em_01.fasta" or die "can not open!\n";
	$line_c = 0;
	print OUTPUT ">chain_$items[1]_em\n";
	while(chomp($line=<INPUT>)){
		$line_c++;
		if ($line_c > 1){
			print OUTPUT "$line\n";
		}
	}
	close INPUT;
	close OUTPUT;

	system("cat chain_$items[1]_raw.fasta chain_$items[1]_em_01.fasta > chain_$items[1]_re_01.fasta");
	system("../clustalw2 chain_$items[1]_re_01.fasta");
	

	$raw_seq = undef;
	$em_seq = undef;
	$cth_seq = undef;
	$seq_mark = 0;
	open INPUT, "chain_$items[1]_re_01.aln" or die "can not open!\n";
	open OUTPUT, ">chain_$items[1]_fe_01.fasta" or die "can not open!\n";
	print OUTPUT ">chain_$items[1]_fe\n";
	while(chomp($line=<INPUT>)){
		@re_item = split /\s+/, $line;
		if ($re_item[0] eq "chain_$items[1]_raw"){
			$seq_mark++;
			$raw_seq.=$re_item[1];

			$wp_mark = 0;
			@gezis = split //, $line;
			for ($gezis_i = 0; $gezis_i < @gezis; $gezis_i++){
				if (($gezis[$gezis_i] eq " ") && ($wp_mark == 0)){
					$wp_mark = 1;
					next;
				}
				if (($gezis[$gezis_i] ne " ") && ($wp_mark == 1)){
					$cth_start_num = $gezis_i;
					last;
				}
			}
			next;
		}
		if ($re_item[0] eq "chain_$items[1]_em"){
			$seq_mark++;
			$em_seq.=$re_item[1];
			next;
		}
		if ($seq_mark == 2){
			@gezis = split //, $line;
			for ($gezis_i = $cth_start_num; $gezis_i < $cth_start_num+60; $gezis_i++){
				$cth_seq.=$gezis[$gezis_i];
			}
			$seq_mark = 0;
		}
	}
	
	@em_seq_list = split //, $em_seq;
	@raw_seq_list = split //, $raw_seq;
	@cth_seq_list = split //, $cth_seq;
	for ($em_i = 0; $em_i < @em_seq_list; $em_i++){
		if ($em_seq_list[$em_i] ne "-"){
			$start_index = $em_i ;
			last;
		}
	}
	for ($em_i = -1; $em_i > -@em_seq_list; $em_i--){
		if ($em_seq_list[$em_i] ne "-"){
			$end_index = @em_seq_list + ($em_i + 1) - 1;
			last;
		}
	}

	for ($raw_i = $start_index; $raw_i <= $end_index; $raw_i++){
		print OUTPUT "$raw_seq_list[$raw_i]";
	}
	print "start index: $start_index\nend_index: $end_index\n";
	print OUTPUT "\n";
	close OUTPUT;
	close INPUT;

	$itv_start_mark = 0;
	$itv_end_mark = 1;
	$itv_mark = 0;
	for ($raw_i = $start_index; $raw_i <= $end_index; $raw_i++){
		if (($em_seq_list[$raw_i] eq "-") && ($itv_start_mark == 0) && ($itv_end_mark == 1)) {
			#$em_itv_start_b = $em_seq_list[$raw_i];
			$raw_itv_start = $raw_seq_list[$raw_i];
			$raw_itv_start_idx = $raw_i;
			$em_itv_start_a = $em_seq_list[$raw_i-1];
			$em_itv_start_motif = $em_seq_list[$raw_i-3].$em_seq_list[$raw_i-2].$em_seq_list[$raw_i-1];
			$raw_itv_start_motif = $raw_seq_list[$raw_i-3].$raw_seq_list[$raw_i-2].$raw_seq_list[$raw_i-1];
			$itv_start_mark = 1;
			$itv_end_mark = 0;
			$itv_mark = 1;
		}
		elsif (($em_seq_list[$raw_i] ne "-") && ($itv_start_mark == 1) && ($itv_end_mark == 0)) {
			$em_itv_end_b = $em_seq_list[$raw_i];
			$raw_itv_end = $raw_seq_list[$raw_i-1];
			$raw_itv_end_idx = $raw_i -1;
			$em_itv_end_motif = $em_seq_list[$raw_i].$em_seq_list[$raw_i+1].$em_seq_list[$raw_i+2];
			$raw_itv_end_motif = $raw_seq_list[$raw_i].$raw_seq_list[$raw_i+1].$raw_seq_list[$raw_i+2];
			#$em_itv_end_a = $em_seq_list[$raw_i-1];
			$itv_start_mark = 0;
			$itv_end_mark = 1;
			if (($itv_mark == 1) && ($em_itv_end_b eq $raw_itv_start) && ($em_itv_end_motif ne $raw_itv_end_motif) ){
				$itv_mark = 0;
				$em_seq_list[$raw_itv_start_idx] = $em_itv_end_b;
				$em_seq_list[$raw_itv_end_idx+1] = "-";
				$cth_seq_list[$raw_itv_start_idx] = "\*";
				$cth_seq_list[$raw_itv_end_idx+1] = " ";
			}
			elsif (($itv_mark == 1) && ($em_itv_start_a eq $raw_itv_end) && ($em_itv_start_motif ne $raw_itv_start_motif) ){
				$itv_mark = 0;
				$em_seq_list[$raw_itv_end_idx] = $em_itv_start_a;
				$em_seq_list[$raw_itv_start_idx-1] = "-";
				$cth_seq_list[$raw_itv_end_idx] = "\*";
				$cth_seq_list[$raw_itv_start_idx-1] = " ";
			}
		}
	}


	#system( "mv chain_$items[1]_re.aln  chain_$items[1]_re.aln_bak" );

	open OUTPUT, ">chain_$items[1]_re_02.aln" or die "can not open!\n";
	print OUTPUT "CLUSTAL 2.1 multiple sequence alignment


";	
	$resi_count=0;
	$raw_line=undef;
	$em_line=undef;
	for ($raw_i = 0; $raw_i < @raw_seq_list; $raw_i++){
		$resi_count++;
		$raw_line.=$raw_seq_list[$raw_i];
		$em_line.=$em_seq_list[$raw_i];
		$cth_line.=$cth_seq_list[$raw_i];
		if ($resi_count==60){
			print OUTPUT "chain_$items[1]_raw      $raw_line\n";
			print OUTPUT "chain_$items[1]_em       $em_line\n";
			print OUTPUT "                 $cth_line\n\n";
			$resi_count = 0;
			$raw_line=undef;
			$em_line=undef;
			$cth_line=undef;
		}
	}
	if (($resi_count<60) && ($resi_count>0)){
		print OUTPUT "chain_$items[1]_raw      $raw_line\n";
		print OUTPUT "chain_$items[1]_em       $em_line\n";
		print OUTPUT "                 $cth_line\n";
		$resi_count = 0;
		$raw_line=undef;
		$em_line=undef;
		$cth_line=undef;
	}


	close OUTPUT;

	print  "#################################################\n";
	print  "#                  By Liu Qing                  #\n";
	print  "# University of Science and Technology of China #\n";
	print  "#################################################\n";
